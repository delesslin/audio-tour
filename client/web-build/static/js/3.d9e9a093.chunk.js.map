{"version":3,"sources":["../src/FileSystem.types.ts","../src/ExponentFileSystem.web.ts","../src/ExponentFileSystemShim.ts","../src/FileSystem.ts","hooks/useData/fs.js"],"names":["FileSystemSessionType","FileSystemUploadType","EncodingType","addListener","eventName","removeListeners","count","console","warn","EventEmitter","normalizeEndingSlash","p","replace","documentDirectory","cacheDirectory","bundledAssets","bundleDirectory","readAsStringAsync","fileUri","options","a","async","UnavailabilityError","deleteAsync","url","callback","resumeData","this","_uuid","uuid","_url","_fileUri","_options","_resumeData","_callback","_subscription","_emitter","downloadResumableStartAsync","_addSubscription","downloadResumablePauseAsync","pauseResult","_removeSubscription","savable","Error","event","data","removeSubscription","StorageAccessFramework","baseReadAsStringAsync","baseWriteAsStringAsync","contents","writeAsStringAsync","baseDeleteAsync","baseMoveAsync","moveAsync","baseCopyAsync","copyAsync","getUriForDirectoryInRoot","folderName","requestDirectoryPermissionsAsync","initialFileUrl","readDirectoryAsync","dirUri","readSAFDirectoryAsync","makeDirectoryAsync","parentUri","dirName","makeSAFDirectoryAsync","createFileAsync","fileName","mimeType","createSAFFileAsync","fs","readLocalString","FileSystem","dir","mkdir","readDir","download","uri","downloadAsync","sessionType","BACKGROUND","delete"],"mappings":"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","file":"static/js/3.d9e9a093.chunk.js","sourcesContent":["export enum FileSystemSessionType {\n  /*\n   * Using this mode means that the downloading/uploading session on the native side will work even if the application is moved to background.\n   *\n   * If the task completes while the application is in background, the Promise will be either resolved immediately or (if the application execution has already been stopped) once the app is moved to foreground again.\n   */\n  BACKGROUND = 0,\n  /*\n   * Using this mode means that downloading/uploading session on the native side will be terminated once the application becomes inactive (e.g. when it goes to background).\n   * Bringing the application to foreground again would trigger Promise rejection.\n   */\n  FOREGROUND = 1,\n}\n\nexport enum FileSystemUploadType {\n  BINARY_CONTENT = 0,\n  MULTIPART = 1,\n}\n\nexport type DownloadOptions = {\n  md5?: boolean;\n  cache?: boolean;\n  headers?: Record<string, string>;\n  /*\n   * iOS only\n   */\n  sessionType?: FileSystemSessionType;\n};\n\nexport type FileSystemHttpResult = {\n  headers: Record<string, string>;\n  status: number;\n  mimeType: string | null;\n};\n\nexport type FileSystemDownloadResult = FileSystemHttpResult & {\n  uri: string;\n  md5?: string;\n};\n\n/**\n * @deprecated Use `FileSystemDownloadResult` instead.\n */\nexport type DownloadResult = FileSystemDownloadResult;\n\nexport type FileSystemUploadOptions = (\n  | {\n      uploadType?: FileSystemUploadType.BINARY_CONTENT;\n    }\n  | {\n      uploadType: FileSystemUploadType.MULTIPART;\n      fieldName?: string;\n      mimeType?: string;\n      parameters?: Record<string, string>;\n    }\n) & {\n  headers?: Record<string, string>;\n  httpMethod?: FileSystemAcceptedUploadHttpMethod;\n  sessionType?: FileSystemSessionType;\n};\n\nexport type FileSystemUploadResult = FileSystemHttpResult & {\n  body: string;\n};\n\nexport type DownloadProgressCallback = (data: DownloadProgressData) => void;\n\nexport type DownloadProgressData = {\n  totalBytesWritten: number;\n  totalBytesExpectedToWrite: number;\n};\n\nexport type DownloadPauseState = {\n  url: string;\n  fileUri: string;\n  options: DownloadOptions;\n  resumeData?: string;\n};\n\nexport type FileInfo =\n  | {\n      exists: true;\n      uri: string;\n      size: number;\n      isDirectory: boolean;\n      modificationTime: number;\n      md5?: string;\n    }\n  | {\n      exists: false;\n      uri: string;\n      size: undefined;\n      isDirectory: false;\n      modificationTime: undefined;\n      md5: undefined;\n    };\n\nexport enum EncodingType {\n  UTF8 = 'utf8',\n  Base64 = 'base64',\n}\n\nexport type FileSystemAcceptedUploadHttpMethod = 'POST' | 'PUT' | 'PATCH';\n\nexport type ReadingOptions = {\n  encoding?: EncodingType | 'utf8' | 'base64';\n  position?: number;\n  length?: number;\n};\n\nexport type WritingOptions = {\n  encoding?: EncodingType | 'utf8' | 'base64';\n};\n\nexport type ProgressEvent = {\n  uuid: string;\n  data: {\n    totalBytesWritten: number;\n    totalBytesExpectedToWrite: number;\n  };\n};\n\nexport type FileSystemRequestDirectoryPermissionsResult =\n  | {\n      granted: true;\n      directoryUri: string;\n    }\n  | {\n      granted: false;\n    };\n\ntype PlatformMethod = (...args: any[]) => Promise<any>;\n\nexport interface ExponentFileSystemModule {\n  readonly name: 'ExponentFileSystem';\n  readonly documentDirectory: string | null;\n  readonly cacheDirectory: string | null;\n  readonly bundledAssets: string | null;\n  readonly bundleDirectory: string | null;\n  readonly getInfoAsync?: PlatformMethod;\n  readonly readAsStringAsync?: PlatformMethod;\n  readonly writeAsStringAsync?: PlatformMethod;\n  readonly deleteAsync?: PlatformMethod;\n  readonly moveAsync?: PlatformMethod;\n  readonly copyAsync?: PlatformMethod;\n  readonly makeDirectoryAsync?: PlatformMethod;\n  readonly readDirectoryAsync?: PlatformMethod;\n  readonly downloadAsync?: PlatformMethod;\n  readonly uploadAsync?: PlatformMethod;\n  readonly downloadResumableStartAsync?: PlatformMethod;\n  readonly downloadResumablePauseAsync?: PlatformMethod;\n  readonly getContentUriAsync?: PlatformMethod;\n  readonly getFreeDiskStorageAsync?: PlatformMethod;\n  readonly getTotalDiskCapacityAsync?: PlatformMethod;\n  readonly requestDirectoryPermissionsAsync?: PlatformMethod;\n  readonly readSAFDirectoryAsync?: PlatformMethod;\n  readonly makeSAFDirectoryAsync?: PlatformMethod;\n  readonly createSAFFileAsync?: PlatformMethod;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n}\n","import ExponentFileSystemShim from './ExponentFileSystemShim';\nexport default ExponentFileSystemShim;\n","import { ExponentFileSystemModule } from './FileSystem.types';\n\nconst platformModule: ExponentFileSystemModule = {\n  get name(): 'ExponentFileSystem' {\n    return 'ExponentFileSystem';\n  },\n  get documentDirectory(): string | null {\n    return null;\n  },\n  get cacheDirectory(): string | null {\n    return null;\n  },\n  get bundledAssets(): string | null {\n    return null;\n  },\n  get bundleDirectory(): string | null {\n    return null;\n  },\n  addListener(eventName: string): void {},\n  removeListeners(count: number): void {},\n};\n\nexport default platformModule;\n","import { EventEmitter, Subscription, UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function(resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: DownloadProgressCallback,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport class DownloadResumable {\n  _uuid: string;\n  _url: string;\n  _fileUri: string;\n  _options: DownloadOptions;\n  _resumeData?: string;\n  _callback?: DownloadProgressCallback;\n  _subscription?: Subscription | null;\n  _emitter: EventEmitter;\n\n  constructor(\n    url: string,\n    fileUri: string,\n    options: DownloadOptions = {},\n    callback?: DownloadProgressCallback,\n    resumeData?: string\n  ) {\n    this._uuid = uuidv4();\n    this._url = url;\n    this._fileUri = fileUri;\n    this._options = options;\n    this._resumeData = resumeData;\n    this._callback = callback;\n    this._subscription = null;\n    this._emitter = new EventEmitter(ExponentFileSystem);\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this._uuid);\n    this._removeSubscription();\n    if (pauseResult) {\n      this._resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n    this._addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this._url,\n      this._fileUri,\n      this._uuid,\n      this._options,\n      this._resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this._url,\n      fileUri: this._fileUri,\n      options: this._options,\n      resumeData: this._resumeData,\n    };\n  }\n\n  _addSubscription(): void {\n    if (this._subscription) {\n      return;\n    }\n    this._subscription = this._emitter.addListener(\n      'expo-file-system.downloadProgress',\n      (event: ProgressEvent) => {\n        if (event.uuid === this._uuid) {\n          const callback = this._callback;\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      }\n    );\n  }\n\n  _removeSubscription(): void {\n    if (!this._subscription) {\n      return;\n    }\n    this._emitter.removeSubscription(this._subscription);\n    this._subscription = null;\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n","import * as FileSystem from 'expo-file-system'\nconst fs = {\n  readLocalString: FileSystem.readAsStringAsync,\n  dir: FileSystem.documentDirectory,\n  mkdir: FileSystem.makeDirectoryAsync,\n  readDir: FileSystem.readDirectoryAsync,\n  download: FileSystem.downloadAsync,\n  delete: FileSystem.deleteAsync,\n}\n\nexport default fs\n"],"sourceRoot":""}